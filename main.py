
# -*- coding: utf-8 -*-
import os
import json
import logging
from typing import Dict, List, Any, Optional, Set

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import TelegramAPIError
from dotenv import load_dotenv
load_dotenv()

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò ====================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class Config:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
    ADMIN_IDS = set(map(int, os.getenv("ADMIN_IDS", "").split(','))) if os.getenv("@UHMLT") else set()
    CONTACT_MANAGER = os.getenv("CONTACT_MANAGER", "@UHMLT")
    CONTACT_PHONE = os.getenv("CONTACT_PHONE", "+998 90 977 31 35")
    POLICY_URL = os.getenv("POLICY_URL", "https://uhmlandtech.uz/uhm/")
    SOCIAL_MEDIA = {
        'instagram': os.getenv("INSTAGRAM_URL", "https://www.instagram.com/uhm.uz/"),
        'facebook': os.getenv("FACEBOOK_URL", "https://www.facebook.com/uhmtashkent"),
        'telegram': os.getenv("TELEGRAM_URL", "https://t.me/uhmuz")
    }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
if not Config.BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN)")

# ==================== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• –ò –ö–û–ù–°–¢–ê–ù–¢–´ ====================

class UserData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self):
        self.language: str = 'ru'
        self.compare_selection: List[str] = []
        self.calculator_data: Dict[str, Any] = {}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–ª–µ–¥—É–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_data: Dict[int, UserData] = {}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ JSON-—Ñ–∞–π–ª–∞—Ö
REQUIRED_KEYS = {
    'texts_ru.json': ['start', 'menu', 'unknown', 'back', 'choose_category', 
                     'choose_model', 'calculator', 'catalog', 'compare'],
    'texts_uz.json': ['start', 'menu', 'unknown', 'back', 'choose_category',
                     'choose_model', 'calculator', 'catalog', 'compare']
}

# ==================== –£–¢–ò–õ–ò–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def load_json_data() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
    try:
        with open("texts_ru.json", encoding="utf-8") as f:
            texts_ru = json.load(f)
        with open("texts_uz.json", encoding="utf-8") as f:
            texts_uz = json.load(f)
        with open("models.json", encoding="utf-8") as f:
            models = json.load(f)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        for filename, required_keys in REQUIRED_KEYS.items():
            data = texts_ru if 'ru' in filename else texts_uz if 'uz' in filename else models
            for key in required_keys:
                if key not in data:
                    raise ValueError(f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á '{key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ {filename}")

        return {
            "TEXTS": {'ru': texts_ru, 'uz': texts_uz},
            "MODELS": models
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
try:
    data = load_json_data()
    TEXTS = data["TEXTS"]
    MODELS = data["MODELS"]
except Exception as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    exit(1)

def get_user(uid: int) -> UserData:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if uid not in user_data:
        user_data[uid] = UserData()
    return user_data[uid]

def get_text(uid: int, key: str, **kwargs) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    user = get_user(uid)
    text = TEXTS.get(user.language, {}).get(key, TEXTS['ru'].get(key, "‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"))
    return text.format(**kwargs) if kwargs else text

def create_menu(uid: int) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é"""
    menu_items = TEXTS[get_user(uid).language]['menu']
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(*[KeyboardButton(item) for item in menu_items])
    return kb

def create_models_keyboard(uid: int) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏ —Ç–µ—Ö–Ω–∏–∫–∏"""
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    models_list = [model["name"] for category in MODELS.values() for model in category]
    kb.add(*[KeyboardButton(model) for model in models_list])
    kb.add(KeyboardButton(get_text(uid, "back")))
    return kb

def create_categories_keyboard(uid: int) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–µ—Ö–Ω–∏–∫–∏"""
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(*[KeyboardButton(category) for category in MODELS.keys()])
    kb.add(KeyboardButton(get_text(uid, "back")))
    return kb

async def delete_previous_messages(bot: Bot, chat_id: int, message_ids: List[int]):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    for msg_id in message_ids:
        try:
            await bot.delete_message(chat_id, msg_id)
        except TelegramAPIError:
            pass

# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ====================

class CalculatorStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —ç–∫–æ–Ω–æ–º–∏–∏"""
    model = State()
    hours_per_day = State()
    days_per_month = State()
    months_total = State()
    rent_per_month = State()
    operator_salary = State()
    fuel_per_day = State()
    fuel_price = State()
    service_cost = State()

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ====================

bot = Bot(token=Config.BOT_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================

@dp.message_handler(commands=["start", "help", "language"])
async def start_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await state.finish()
    user = get_user(message.from_user.id)
    
    if message.get_command() == "language":
        await prompt_language(message)
        return
    
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏!\n\n"
        "üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üá∫üáø Tilni tanlang"
    )
    
    await message.answer(welcome_text, reply_markup=create_language_keyboard())

async def prompt_language(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    await message.answer(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:",
        reply_markup=create_language_keyboard()
    )

def create_language_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O‚Äòzbekcha")
    return kb

@dp.message_handler(lambda m: m.text in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O‚Äòzbekcha"])
async def set_language_handler(message: types.Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_user(message.from_user.id)
    user.language = "ru" if "–†—É—Å" in message.text else "uz"
    
    await message.answer(
        get_text(message.from_user.id, "start"),
        reply_markup=create_menu(message.from_user.id)
    )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ ====================

@dp.message_handler(lambda m: m.text == get_text(m.from_user.id, "catalog"))
async def catalog_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ—Ö–Ω–∏–∫–∏"""
    await message.answer(
        get_text(message.from_user.id, "choose_category"),
        reply_markup=create_categories_keyboard(message.from_user.id)
    )

@dp.message_handler(lambda m: m.text in MODELS.keys())
async def category_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏"""
    category = message.text
    models = MODELS[category]
    
    for model in models:
        caption = f"<b>{model['name']}</b> ‚Äî {model['price']} —Å—É–º\n"
        if "specs" in model:
            for spec, value in model["specs"].items():
                caption += f"\n‚Ä¢ <i>{spec}:</i> {value}"
        
        try:
            await message.answer_photo(
                model["image"],
                caption=caption,
                reply_markup=create_menu(message.from_user.id)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer(caption)

@dp.message_handler(lambda m: m.text == get_text(m.from_user.id, "calculator"))
async def calculator_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    await message.answer(
        get_text(message.from_user.id, "choose_model"),
        reply_markup=create_models_keyboard(message.from_user.id)
    )
    await CalculatorStates.model.set()

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê ====================

@dp.message_handler(state=CalculatorStates.model)
async def process_model(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    model_name = message.text
    model_exists = any(model_name in (m["name"] for m in models) for models in MODELS.values())
    
    if not model_exists:
        await message.answer("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    await state.update_data(model=model_name)
    await message.answer("‚åö –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ—Ö–Ω–∏–∫–∞?")
    await CalculatorStates.hours_per_day.set()

async def validate_number_input(message: types.Message, min_val: float = 0, max_val: float = float('inf')) -> Optional[float]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –≤–≤–æ–¥"""
    try:
        value = float(message.text)
        if value <= min_val or value > max_val:
            raise ValueError
        return value
    except ValueError:
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {min_val} –¥–æ {max_val}")
        return None

@dp.message_handler(state=CalculatorStates.hours_per_day)
async def process_hours(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã"""
    hours = await validate_number_input(message, min_val=0, max_val=24)
    if hours is None:
        return
    
    await state.update_data(hours_per_day=hours)
    await message.answer("üìÖ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü —Ç–µ—Ö–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è?")
    await CalculatorStates.days_per_month.set()

@dp.message_handler(state=CalculatorStates.days_per_month)
async def process_days(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    days = await validate_number_input(message, min_val=0, max_val=31)
    if days is None:
        return
    
    await state.update_data(days_per_month=days)
    await message.answer("üìÜ –ù–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ?")
    await CalculatorStates.months_total.set()

@dp.message_handler(state=CalculatorStates.months_total)
async def process_months(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Å—è—Ü–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    months = await validate_number_input(message, min_val=1)
    if months is None:
        return
    
    await state.update_data(months_total=months)
    await message.answer("üí∏ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∞—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –≤ –º–µ—Å—è—Ü?")
    await CalculatorStates.rent_per_month.set()

@dp.message_handler(state=CalculatorStates.rent_per_month)
async def process_rent(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã"""
    rent = await validate_number_input(message, min_val=1)
    if rent is None:
        return
    
    await state.update_data(rent_per_month=rent)
    await message.answer("üë∑ –ó–∞—Ä–ø–ª–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –º–µ—Å—è—Ü?")
    await CalculatorStates.operator_salary.set()

@dp.message_handler(state=CalculatorStates.operator_salary)
async def process_salary(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—Ä–ø–ª–∞—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    salary = await validate_number_input(message, min_val=1)
    if salary is None:
        return
    
    await state.update_data(operator_salary=salary)
    await message.answer("‚õΩ –°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ —Ä–∞—Å—Ö–æ–¥—É–µ—Ç—Å—è –≤ –¥–µ–Ω—å?")
    await CalculatorStates.fuel_per_day.set()

@dp.message_handler(state=CalculatorStates.fuel_per_day)
async def process_fuel_consumption(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞"""
    fuel = await validate_number_input(message, min_val=0)
    if fuel is None:
        return
    
    await state.update_data(fuel_per_day=fuel)
    await message.answer("üí∞ –¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä —Ç–æ–ø–ª–∏–≤–∞?")
    await CalculatorStates.fuel_price.set()

@dp.message_handler(state=CalculatorStates.fuel_price)
async def process_fuel_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–Ω—ã —Ç–æ–ø–ª–∏–≤–∞"""
    price = await validate_number_input(message, min_val=0)
    if price is None:
        return
    
    await state.update_data(fuel_price=price)
    await message.answer("üîß –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è?")
    await CalculatorStates.service_cost.set()

@dp.message_handler(state=CalculatorStates.service_cost)
async def process_service_cost(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    service_cost = await validate_number_input(message, min_val=0)
    if service_cost is None:
        return
    
    await state.update_data(service_cost=service_cost)
    data = await state.get_data()
    user = get_user(message.from_user.id)
    
    # –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–µ–ª—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    model = next(
        (item for items in MODELS.values() for item in items if item["name"] == data["model"]),
        None
    )
    
    if not model:
        await message.answer("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=create_menu(message.from_user.id))
        await state.finish()
        return
    
    # –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
    hours = data["hours_per_day"]
    days = data["days_per_month"]
    months = data["months_total"]
    rent = data["rent_per_month"]
    salary = data["operator_salary"]
    fuel_cons = data["fuel_per_day"]
    fuel_price = data["fuel_price"]
    service = data["service_cost"]
    
    fuel_total = fuel_cons * fuel_price * days * months
    own_cost = salary * months + fuel_total + service
    rent_total = rent * months
    saving = rent_total - own_cost
    
    try:
        price = int(model["price"].replace(" ", "").replace("—Å—É–º", ""))
    except:
        price = 0
    
    if saving <= 0:
        result_text = (
            f"‚ùó –ü–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º —Ç–µ—Ö–Ω–∏–∫–∞ –Ω–µ –¥–∞—ë—Ç –≤—ã–≥–æ–¥—ã.\n"
            f"–í—ã —Ç—Ä–∞—Ç–∏—Ç–µ {own_cost:,} —Å—É–º, –∞ –∞—Ä–µ–Ω–¥–∞ —Å—Ç–æ–∏—Ç {rent_total:,} —Å—É–º."
        )
    else:
        payback = round(price / (saving / months), 1) if price else 0
        result_text = (
            f"‚úÖ –í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ ~{saving:,} —Å—É–º –∑–∞ {months} –º–µ—Å.\n"
            f"üìâ –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback} –º–µ—Å.\n\n"
            f"üîπ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {own_cost:,} —Å—É–º\n"
            f"üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {rent_total:,} —Å—É–º"
        )
    
    await message.answer(result_text, reply_markup=create_menu(message.from_user.id))
    await state.finish()

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–†–ê–í–ù–ï–ù–ò–Ø –ú–û–î–ï–õ–ï–ô ====================

@dp.message_handler(lambda m: m.text == get_text(m.from_user.id, "compare"))
async def start_compare_handler(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    user = get_user(message.from_user.id)
    user.compare_selection = []
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
        reply_markup=create_models_keyboard(message.from_user.id)
    )

@dp.message_handler(lambda m: m.text in [model["name"] for models in MODELS.values() for model in models])
async def compare_model_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    user = get_user(message.from_user.id)
    model_name = message.text
    
    if model_name in user.compare_selection:
        await message.answer("–≠—Ç–∞ –º–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
        return
    
    user.compare_selection.append(model_name)
    
    if len(user.compare_selection) == 1:
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –º–æ–¥–µ–ª—å:",
            reply_markup=create_models_keyboard(message.from_user.id)
        )
    elif len(user.compare_selection) == 2:
        model1 = next(
            (item for items in MODELS.values() for item in items if item["name"] == user.compare_selection[0]),
            None
        )
        model2 = next(
            (item for items in MODELS.values() for item in items if item["name"] == user.compare_selection[1]),
            None
        )
        
        if not model1 or not model2:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–Ω—É –∏–∑ –º–æ–¥–µ–ª–µ–π.")
            user.compare_selection = []
            return
        
        comparison_text = generate_comparison_text(model1, model2)
        await message.answer(comparison_text, reply_markup=create_menu(message.from_user.id))
        user.compare_selection = []

def generate_comparison_text(model1: Dict, model2: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    text = (
        f"üÜö <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π</b>\n\n"
        f"<u>{model1['name']}</u> vs <u>{model2['name']}</u>\n\n"
    )
    
    # –û–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    common_specs = set(model1.get("specs", {}).keys()) & set(model2.get("specs", {}).keys())
    if common_specs:
        text += "üìä <b>–û–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
        for spec in common_specs:
            val1 = model1['specs'][spec]
            val2 = model2['specs'][spec]
            text += f"‚Ä¢ {spec}: {val1} | {val2}\n"
        text += "\n"
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏
    unique1 = set(model1.get("specs", {}).keys()) - set(model2.get("specs", {}).keys())
    if unique1:
        text += f"üîπ <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {model1['name']}:</b>\n"
        for spec in unique1:
            text += f"‚Ä¢ {spec}: {model1['specs'][spec]}\n"
        text += "\n"
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—Ç–æ—Ä–æ–π –º–æ–¥–µ–ª–∏
    unique2 = set(model2.get("specs", {}).keys()) - set(model1.get("specs", {}).keys())
    if unique2:
        text += f"üî∏ <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {model2['name']}:</b>\n"
        for spec in unique2:
            text += f"‚Ä¢ {spec}: {model2['specs'][spec]}\n"
    
    # –¶–µ–Ω—ã
    text += f"\nüíµ <b>–¶–µ–Ω—ã:</b>\n"
    text += f"‚Ä¢ {model1['name']}: {model1['price']}\n"
    text += f"‚Ä¢ {model2['name']}: {model2['price']}\n"
    
    return text

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ù–¢–ê–ö–¢–û–í –ò –ò–ù–§–û–†–ú–ê–¶–ò–ò ====================

@dp.message_handler(lambda m: m.text.startswith("üìû"))
async def contact_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    contact_text = (
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
        f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {Config.CONTACT_MANAGER}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {Config.CONTACT_PHONE}"
    )
    await message.answer(contact_text)

@dp.message_handler(lambda m: m.text.startswith("üîí"))
async def policy_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    policy_text = (
        f"üîê <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:</b>\n\n"
        f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {Config.POLICY_URL}\n\n"
        f"<b>–ú—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö:</b>\n"
        f"üì∏ Instagram: {Config.SOCIAL_MEDIA['instagram']}\n"
        f"üìò Facebook: {Config.SOCIAL_MEDIA['facebook']}\n"
        f"üì¢ Telegram: {Config.SOCIAL_MEDIA['telegram']}"
    )
    await message.answer(policy_text)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ====================

@dp.errors_handler()
async def error_handler(update: types.Update, exception: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {exception}", exc_info=True)
    
    if isinstance(update, types.Message):
        chat_id = update.chat.id
        try:
            await update.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except TelegramAPIError:
            pass
    
    return True

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

async def on_startup(dp: Dispatcher):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    for admin_id in Config.ADMIN_IDS:
        try:
            await bot.send_message(admin_id, "üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except TelegramAPIError:
            pass

async def on_shutdown(dp: Dispatcher):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    logger.info("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...")
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω")

if __name__ == "__main__":
    try:
        executor.start_polling(
            dp,
            skip_updates=True,
            on_startup=on_startup,
            on_shutdown=on_shutdown
        )
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        exit(1)
